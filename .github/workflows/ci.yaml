name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    environment: testing  # Refers to the environment named "testing" in GitHub settings

    services:
      db:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Wait for the database to be ready
      - name: Wait for PostgreSQL to be ready
        run: |
          until docker exec ${{ job.services.db.id }} pg_isready -U postgres; do
            sleep 1
          done

      # Step 4: Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t homely-api-image:latest -f backend/api/Dockerfile backend/api || exit 1

      # Step 5: Run auto-formatting check with black
      - name: Check code formatting with black
        run: |
          docker run --network="host" -e DATABASE_URL homely-api-image:latest poetry run black --check ./src || exit 1

      # Step 6: Run linter inside Docker container (flake8)
      - name: Run flake8 linter
        run: |
          docker run --network="host" -e DATABASE_URL homely-api-image:latest poetry run flake8 ./src || exit 1

      # Step 7: Run tests inside the Docker container
      - name: Run tests inside Docker container
        run: |
          docker run --network="host" -e DATABASE_URL homely-api-image:latest poetry run pytest --maxfail=1 --disable-warnings || exit 1
      
      # Step 8: Deploy the web service
      - name: Deploy
        if: github.ref == 'refs/heads/main'
        env:
          DEPLOY_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
        run: |
          curl "$DEPLOY_URL" || exit 1
          