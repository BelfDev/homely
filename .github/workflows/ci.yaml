name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  DATABASE_TEST_URL: ${{ secrets.DATABASE_TEST_URL }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    environment: testing

    services:
      db:
        image: postgres:16
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Create .env file
      - name: Create .env file
        run: |
          echo DATABASE_URL=$DATABASE_URL > .env
          echo DATABASE_TEST_URL=$DATABASE_TEST_URL >> .env
          echo POSTGRES_USER=$POSTGRES_USER >> .env
          echo POSTGRES_PASSWORD=$POSTGRES_PASSWORD >> .env
          echo POSTGRES_DB=$POSTGRES_DB >> .env

      # Step 3: Cache Poetry dependencies
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: /root/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      # Step 4: Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 5: Wait for the database to be ready
      - name: Wait for PostgreSQL to be ready
        run: |
          until docker exec ${{ job.services.db.id }} pg_isready -U postgres; do
            sleep 1
          done

      # Step 6: Build the Docker image with cache for dependencies
      - name: Build Docker image with cache
        run: |
          DOCKER_BUILDKIT=1 docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max \
            --build-arg CACHE_DIR=/root/.cache/pypoetry \
            -t homely-api-image:latest \
            -f backend/api/Dockerfile backend/api \
            --load

      # Step 7: Run formatting, linting, and tests in a single container session
      - name: Run formatting, linting, and tests
        run: |
          docker run --network="host" --env-file .env homely-api-image:latest sh -c "
            echo 'Running black formatting...'; 
            poetry run black --check ./src || { echo 'Black formatting failed!'; exit 1; }

            echo 'Running flake8 linter...'; 
            poetry run flake8 ./src || { echo 'Flake8 linting failed!'; exit 1; }

            echo 'Running tests with pytest...'; 
            poetry run pytest --maxfail=1 --disable-warnings || { echo 'Tests failed!'; exit 1; }
          "

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test  # This ensures deployment only runs if the build-and-test job succeeds
    if: github.ref == 'refs/heads/main'  # Only deploy on pushes to the main branch

    steps:
      # Step 1: Deploy the web service
      - name: Deploy
        env:
          DEPLOY_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
        run: |
          curl "$DEPLOY_URL" || exit 1
